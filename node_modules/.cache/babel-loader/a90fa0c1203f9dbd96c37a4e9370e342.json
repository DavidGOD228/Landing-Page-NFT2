{"ast":null,"code":"import _slicedToArray from\"/srv/crypto/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";import{CardItem,InfoMorh}from\"components\";import classes from\"./style.module.scss\";import{morphsData}from\"data/morphs/data\";import HiddenCards from\"../HiddenCards/HiddenCards\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function Morph(){var _useState=useState(morphsData[0]),_useState2=_slicedToArray(_useState,2),morph=_useState2[0],setMorph=_useState2[1];var morphChooseHandler=function morphChooseHandler(m){return setMorph(m);};var mapCards=morphsData.map(function(m){var isActive=m.id===morph.id&&classes.isActive;return/*#__PURE__*/_jsx(CardItem,{morph:m,onClick:function onClick(){return morphChooseHandler(m);},isActive:isActive},m.id);});return/*#__PURE__*/_jsxs(\"div\",{className:classes.morphsContainer,children:[/*#__PURE__*/_jsxs(\"div\",{className:classes.morphCardsWrapper,children:[/*#__PURE__*/_jsx(HiddenCards,{}),/*#__PURE__*/_jsx(\"div\",{className:classes.morphsCards,children:mapCards})]}),/*#__PURE__*/_jsx(InfoMorh,{morph:morph})]});}","map":{"version":3,"names":["useState","CardItem","InfoMorh","classes","morphsData","HiddenCards","Morph","morph","setMorph","morphChooseHandler","m","mapCards","map","isActive","id","morphsContainer","morphCardsWrapper","morphsCards"],"sources":["/srv/crypto/src/components/internal/YourMorph/desktopVersonYourMorph/Morph/Morph.js"],"sourcesContent":["import {useState} from \"react\";\nimport {CardItem, InfoMorh} from \"components\";\n\nimport classes from \"./style.module.scss\";\nimport {morphsData} from \"data/morphs/data\";\nimport HiddenCards from \"../HiddenCards/HiddenCards\";\n\nexport function Morph() {\n  const [morph, setMorph] = useState(morphsData[0]);\n\n  const morphChooseHandler = (m) => setMorph(m);\n\n  const mapCards = morphsData.map((m) => {\n    const isActive = m.id === morph.id && classes.isActive;\n    return (\n      <CardItem\n        key={m.id}\n        morph={m}\n        onClick={() => morphChooseHandler(m)}\n        isActive={isActive}\n      />\n    );\n  });\n\n  return (\n    <div className={classes.morphsContainer}>\n      <div className={classes.morphCardsWrapper}>\n        <HiddenCards/>\n        <div className={classes.morphsCards}>{mapCards}</div>\n      </div>\n      <InfoMorh morph={morph}/>\n    </div>\n  );\n}\n"],"mappings":"iGAAA,OAAQA,QAAR,KAAuB,OAAvB,CACA,OAAQC,QAAR,CAAkBC,QAAlB,KAAiC,YAAjC,CAEA,MAAOC,QAAP,KAAoB,qBAApB,CACA,OAAQC,UAAR,KAAyB,kBAAzB,CACA,MAAOC,YAAP,KAAwB,4BAAxB,C,wFAEA,MAAO,SAASC,MAAT,EAAiB,CACtB,cAA0BN,QAAQ,CAACI,UAAU,CAAC,CAAD,CAAX,CAAlC,wCAAOG,KAAP,eAAcC,QAAd,eAEA,GAAMC,mBAAkB,CAAG,QAArBA,mBAAqB,CAACC,CAAD,QAAOF,SAAQ,CAACE,CAAD,CAAf,EAA3B,CAEA,GAAMC,SAAQ,CAAGP,UAAU,CAACQ,GAAX,CAAe,SAACF,CAAD,CAAO,CACrC,GAAMG,SAAQ,CAAGH,CAAC,CAACI,EAAF,GAASP,KAAK,CAACO,EAAf,EAAqBX,OAAO,CAACU,QAA9C,CACA,mBACE,KAAC,QAAD,EAEE,KAAK,CAAEH,CAFT,CAGE,OAAO,CAAE,yBAAMD,mBAAkB,CAACC,CAAD,CAAxB,EAHX,CAIE,QAAQ,CAAEG,QAJZ,EACOH,CAAC,CAACI,EADT,CADF,CAQD,CAVgB,CAAjB,CAYA,mBACE,aAAK,SAAS,CAAEX,OAAO,CAACY,eAAxB,wBACE,aAAK,SAAS,CAAEZ,OAAO,CAACa,iBAAxB,wBACE,KAAC,WAAD,IADF,cAEE,YAAK,SAAS,CAAEb,OAAO,CAACc,WAAxB,UAAsCN,QAAtC,EAFF,GADF,cAKE,KAAC,QAAD,EAAU,KAAK,CAAEJ,KAAjB,EALF,GADF,CASD"},"metadata":{},"sourceType":"module"}